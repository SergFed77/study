hypercar/tickets/apps.py
from django.apps import AppConfig


class TicketsConfig(AppConfig):
    name = 'ticket'
hypercar/tickets/admin.py
from django.contrib import admin

# Register your models here.
hypercar/tickets/tests.py
from django.test import TestCase

# Create your tests here.
hypercar/tickets/views.py
from django.views import View
from django.http.response import HttpResponse
from django.shortcuts import render
from collections import defaultdict
from django.shortcuts import redirect
service ={
    "inflate_tires": [0, 5],
    "change_oil": [0, 2],
    "diagnostic": [0, 30]
}
line = []
ticket_counter = 0
finished_ticked = 0



class WelcomeView(View):
    def get(self, request, *args, **kwargs):
        return HttpResponse('<h2>Welcome to the Hypercar Service!</h2>')

def change_line(ticket_counter, service_type, line, service):
    if service_type == "change_oil":
        line.append([ticket_counter, service["change_oil"][0] + 1, service_type])
        for ticket in line:
            if ticket[2] != "change_oil":
                ticket[1] += 1
    if service_type == "inflate_tires":
        line.append([ticket_counter, service["inflate_tires"][0] + service["change_oil"][0] + 1, service_type])
        for ticket in line:
            if ticket[2] == "diagnostic":
                ticket[1] += 1
    if service_type == "diagnostic":
        line.append([ticket_counter, service["inflate_tires"][0] + service["change_oil"][0] + service["diagnostic"][0] + 1, service_type])
    return line


class MenuPageView(View):
    def get(self, request, *args, **kwargs):
        return render(request, 'tickets/start.html')  # {'inflate_tires': inflate_tires,'diagnostic': diagnostic, 'change_oil': change_oil})

class ChangeOil(View):
    def get(self, request, *args, **kwargs):
        global ticket_counter, line
        ticket_counter += 1
        line = change_line(ticket_counter, 'change_oil', line, service)
        a = service['inflate_tires'][0] + service['change_oil'][0] + service['diagnostic'][0] + 1
        b = service['change_oil'][0] * service['change_oil'][1]
        service['change_oil'][0] = service['change_oil'][0] + 1

        return HttpResponse(f'<div>Your number is {a}</div><div>Please wait around {b} minutes</div>')
class InflateTires(View):
    def get(self, request, *args, **kwargs):
        global ticket_counter, line
        ticket_counter += 1
        line = change_line(ticket_counter, 'inflate_tires', line, service)
        a = service['inflate_tires'][0] + service['change_oil'][0] + service['diagnostic'][0] + 1
        b = service['change_oil'][0] * service['change_oil'][1] + service['inflate_tires'][0] * service['inflate_tires'][1]
        service['inflate_tires'][0] = service['inflate_tires'][0] + 1
        return HttpResponse(f'<div>Your number is {a}</div><div>Please wait around {b} minutes</div>')
class Diagnostic(View):
    def get(self, request, *args, **kwargs):
        global ticket_counter, line
        ticket_counter += 1
        line = change_line(ticket_counter, 'diagnostic', line, service)
        a = service['inflate_tires'][0] + service['change_oil'][0] + service['diagnostic'][0] + 1
        b = service['change_oil'][0] * service['change_oil'][1] + service['inflate_tires'][0] * service['inflate_tires'][1] + service['diagnostic'][0] * service['diagnostic'][1]
        service['diagnostic'][0] = service['diagnostic'][0] + 1
        return HttpResponse(f'<div>Your number is {a}</div><div>Please wait around {b} minutes</div>')
class ZeroLine(View):
    def get(self, request, *args, **kwargs):
        global line, ticket_counter
        line=[]
        ticket_counter = 0
        service['inflate_tires'][0] = 0
        service['change_oil'][0] = 0
        service['diagnostic'][0] = 0
        a = service['inflate_tires'][0] + service['change_oil'][0] + service['diagnostic'][0]
        return HttpResponse(f'<div>Your number is {a}</div>')
class Processing(View):

    def post(self, request, *args, **kwargs):
        global finished_ticked, line
        number = -1
        request.POST.get('process')
        for i in range(len(line)):
            if line[i][1] == 1:
                number = i

            else:
                line[i][1] -= 1
        if number != -1:
            service[line[number][2]][0] -= 1
            finished_ticked = line[number][0]

            line.pop(number)
        return redirect('/next')

    def get(self, request, *args, **kwargs):
        global line

        b = service['inflate_tires'][0]
        a = service['change_oil'][0]
        c = service['diagnostic'][0]

        return render(request, 'tickets/admin.html', {'a': a, 'b': b, 'c': c, 'line': line})

class Next(View):
    def get(self, request, *args, **kwargs):
        a = str()
        global line, finished_ticked
        a = '<div>Waiting for the next client</div>'
        if finished_ticked != -1:
            a = f'<div>Ticket #{finished_ticked}</div>'
            if len(line) == 0:
                finished_ticked = -1
        return HttpResponse(a)

class Button(View):

    def post(self, request, *args, **kwargs):
        global line
        author = request.user.username if request.user else 'Anonymous'
        for ticket in line:
            if ticket[1] == 1:
                line.remove(ticket)
        return redirect('next')
hypercar/tickets/models.py
from django.db import models

# Create your models here.
hypercar/tickets/migrations/__init__.py
hypercar/tickets/__init__.py
hypercar/hypercar/urls.py
"""hypercar URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/2.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.urls import path
from django.views.generic import RedirectView
from tickets.views import WelcomeView, MenuPageView, Diagnostic, ChangeOil, InflateTires, ZeroLine, Processing, Next


urlpatterns = [
    path('welcome/', WelcomeView.as_view()),
    path('menu/', MenuPageView.as_view()),
    path('get_ticket/change_oil', ChangeOil.as_view()),
    path('get_ticket/inflate_tires', InflateTires.as_view()),
    path('get_ticket/diagnostic', Diagnostic.as_view()),
    path('processing', Processing.as_view()),  #RedirectView.as_view(url='/processing')),
    path('get_ticket/zero_line', ZeroLine.as_view()),
    path('next', Next.as_view())

]
hypercar/hypercar/wsgi.py
"""
WSGI config for hypercar project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')

application = get_wsgi_application()
hypercar/hypercar/__init__.py
hypercar/hypercar/settings.py
"""
Django settings for hypercar project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_^m1$hfk6a^^)zbdize#nwxya@kc9q^@$kzpzzwz!_+l#(5y0%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tickets',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hypercar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hypercar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
hypercar/manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hypercar.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
hypercar/tickets/urls.py
hypercar/hypercar/views.py
hypercar/tickets/templates/tickets/admin.html
<!DOCTYPE html>

<div>Change oil queue: {{a}}</div>
<div>Inflate tires queue: {{b}}</div>
<div>Get diagnostic queue: {{c}}</div>
<div>Line: {{line}}</div>


<form method="POST">{% csrf_token %}
 <input type="submit" value="Process next"  name="process">

<form> 
hypercar/tickets/templates/tickets/start.html
<h2> Shining </h2>
<ul>
  <a href="/get_ticket/inflate_tires">Inflate tires</a>
  <a href="/get_ticket/change_oil">change oil</a>
  <a href="/get_ticket/diagnostic">diagnostic</a>
  <a href="/get_ticket/zero_line">zero line </a>

</ul>
hypercar/hypercar/index.html
hypercar/index.html
